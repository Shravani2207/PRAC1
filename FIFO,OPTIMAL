import java.util.HashSet;
import java.util.Scanner;
public class PageReplacement 
{
    private static void simulateFIFO(int[] pages, int capacity) 
    {
        int noOfPages = pages.length;
        int index = 0, hit = 0, fault = 0;
        double faultRatio, hitRatio;
        int[] frame = new int[capacity];
        for (int i = 0; i < capacity; i++) 
        {
            frame[i] = -1;
        }
        System.out.println("\nFIFO Page Replacement:");
        for (int page : pages) 
        {
            boolean isHit = false;
            for (int j = 0; j < capacity; j++) 
            {
                if (frame[j] == page)
                {
                    isHit = true; // Page hit
                    hit++;
                    break;
                }
            }
            if (!isHit)
            {
                frame[index] = page;
                fault++;
                index = (index + 1) % capacity; 
            }
            System.out.print(" [");
            for (int f : frame)
            {
                if (f == -1) 
                {
                    System.out.print(" ");
                }
                else
                {
                    System.out.print(f);
                }
                System.out.print(" ");
            }
            System.out.println("]");
        }
        faultRatio = ((double) fault / noOfPages) * 100;
        hitRatio = ((double) hit / noOfPages) * 100;
        System.out.println("------------------------------");
        System.out.println("Number of Page Faults: " + fault);
        System.out.println("Hits: " + hit);
        System.out.printf("Hit Ratio: %.2f%%\n", hitRatio);
        System.out.printf("Fault Ratio: %.2f%%\n", faultRatio);
    }
    private static void simulateOptimal(int[] pages, int capacity) 
    {
        int numPages = pages.length;
        int pageFaults = 0, hits = 0;
        HashSet<Integer> frames = new HashSet<>();
        System.out.println("\nOptimal Page Replacement:");
        for (int i = 0; i < numPages; i++) 
        {
            if (frames.size() < capacity)
            {
                if (!frames.contains(pages[i])) 
                {
                    pageFaults++; 
                    frames.add(pages[i]);
                }
                else 
                {
                    hits++;
                }
            } 
            else
            {
                if (!frames.contains(pages[i]))
                { 
                    int farthestIndex = -1;
                    int pageToReplace = -1;
                    for (int frame : frames) 
                    {
                        int nextUse = nextIndex(pages, i, frame);
                        if (nextUse > farthestIndex) 
                        {
                            farthestIndex = nextUse;
                            pageToReplace = frame;
                        }
                    }
                    frames.remove(pageToReplace);
                    frames.add(pages[i]);
                    pageFaults++;
                }
                else
                {
                    hits++;
                }
            }
            System.out.println("Current Frames: " + frames);
        }
        System.out.println("------------------------------");
        System.out.println("Number of Page Faults: " + pageFaults);
        System.out.println("Hits: " + hits);
        System.out.printf("Hit Ratio: %.2f%%\n", ((double) hits / numPages) * 100);
    }
    private static int nextIndex(int[] pages, int curIndex, int page)
    {
        for (int j = curIndex + 1; j < pages.length; j++) 
        { 
            if (pages[j] == page)
            { 
                return j; 
            }
        }
        return Integer.MAX_VALUE; 
    }
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the number of pages you want to enter: ");
        int noOfPages = sc.nextInt();
        int[] pages = new int[noOfPages];
        System.out.println("Enter the pages:");
        for (int i = 0; i < noOfPages; i++)
        {
            pages[i] = sc.nextInt();
        }
        System.out.print("Enter the capacity of frames: ");
        int capacity = sc.nextInt();
        System.out.print("Choose Page Replacement Algorithm (1 for FIFO, 2 for Optimal): ");
        int choice = sc.nextInt();
        if (choice == 1)
        {
            simulateFIFO(pages, capacity);
        } else if (choice == 2)
        {
            simulateOptimal(pages, capacity);
        }
        else 
        {
            System.out.println("Invalid choice. Please choose 1 or 2.");
        }
        sc.close();
    }
}
