10.Write a program to simulate Page replacement algorithm.
A. FIFO
B.LRU
7 0 1 2 0 3 0 4 2 3 0 3 2 1 2 0 1 7 0 1
import java.util.LinkedHashMap;
import java.util.Map;
// LinkedHashMap and Map: Used for implementing the LRU (Least Recently Used) algorithm where we need a cache that keeps track of the order in which items are accessed.
import java.util.Scanner; // Scanner: Used to read input from the user.
public class PageReplacement  // This line defines the class PageReplacement, which will contain methods to simulate FIFO and LRU page replacement algorithms.
{
    private static void simulateFIFO(int[] pages, int capacity) 
// simulateFIFO method which will simulate the FIFO page replacement algorithm.
pages: Array of page numbers that will be referenced.
 capacity: The number of frames in memory.
    {
        int noOfPages = pages.length; // The total number of page references.
        int index = 0, hit = 0, fault = 0; // : Tracks the position of the oldest page to be replaced in FIFO.
        double faultRatio, hitRatio;
        int[] frame = new int[capacity];
        for (int i = 0; i < capacity; i++) 
        {
            frame[i] = -1; // Array representing memory frames. Initially set to -1 to indicate empty frames.
        }
        System.out.println("\nFIFO Page Replacement:");
        for (int page : pages) // Loops through each page reference (page) in the pages array.
        {
            boolean isHit = false;
            for (int j = 0; j < capacity; j++)
            {
                if (frame[j] == page)
                {
                    isHit = true; // Page hit
                    hit++;
                    break;
                }
            }
// For each page reference, it checks if the page is already in memory (frame array). If the page is found, it's a "hit", so hit is incremented, and the loop breaks.
            if (!isHit) // If the page was not a hit  it’s a page fault.
            {
                frame[index] = page; //   The page is placed in the next available frame (frame[index]).
                fault++;
                index = (index + 1) % capacity; // The index is updated using (index + 1) % capacity to cycle through the frames in a circular manner (this ensures FIFO behavior).
            }
            System.out.print("Current Frames: [");
            for (int f : frame)
            {
                if (f == -1) 
                {
                    System.out.print(" ");
                } else
                {
                    System.out.print(f);
                }
                System.out.print(" ");
            }
            System.out.println("]");
        }
•	// After each page reference, it prints the current state of the frames, showing the pages that are loaded in memory.

        faultRatio = ((double) fault / noOfPages) * 100;
        hitRatio = ((double) hit / noOfPages) * 100;
        System.out.println("------------------------------");
        System.out.println("Number of Page Faults: " + fault);
        System.out.println("Hits: " + hit);
        System.out.printf("Hit Ratio: %.2f%%\n", hitRatio);
        System.out.printf("Fault Ratio: %.2f%%\n", faultRatio);
    }
// Calculates and prints the hit ratio and fault ratio:
•	hitRatio = (Number of Hits / Total Pages) * 100
•	faultRatio = (Number of Faults / Total Pages) * 100

•	    private static void simulateLRU(int[] pages, int capacity) // This defines the simulateLRU method which will simulate the LRU page replacement algorithm.
    {
        int numPages = pages.length;
        int pageFaults = 0, hits = 0;
        Map<Integer, Integer> lruCache = new LinkedHashMap<>(capacity, 0.75f, true);
// : A LinkedHashMap that implements LRU. The true parameter ensures that the order of access is maintained (LRU behavior).
        System.out.println("\nLRU Page Replacement:");
        for (int page : pages) {
            if (!lruCache.containsKey(page)) // If the page is not in the cache (!lruCache.containsKey(page)), it’s a page fault.
            {
                pageFaults++;
                if (lruCache.size() >= capacity) // f the cache is full (lruCache.size() >= capacity), it removes the least recently used (LRU) page using iterator().next().
                {
                    int lruPage = lruCache.keySet().iterator().next();
                    lruCache.remove(lruPage);
•	                } //  The page is then added to the cache, and the number of faults or hits is updated accordingly.
It prints the current set of frames (pages in memory) after each reference.
            } else 
            {
                hits++;
            }
            lruCache.put(page, page);
            System.out.println("Current Frames: " + lruCache.keySet());
        }
        double hitRatio = ((double) hits / numPages) * 100;
        System.out.println("------------------------------");
        System.out.println("Number of Page Faults: " + pageFaults);
        System.out.println("Hits: " + hits);
        System.out.printf("Hit Ratio: %.2f%%\n", hitRatio);
    }
    public static void main(String[] args) 
    {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the number of pages you want to enter: ");
        int noOfPages = sc.nextInt();
        int[] pages = new int[noOfPages];
        System.out.println("Enter the pages:");
        for (int i = 0; i < noOfPages; i++) 
        {
            pages[i] = sc.nextInt();
        }
        System.out.print("Enter the capacity of frames: ");
        int capacity = sc.nextInt();
        System.out.print("Choose Page Replacement Algorithm (1 for FIFO, 2 for LRU): ");
        int choice = sc.nextInt();
        if (choice == 1) 
        {
            simulateFIFO(pages, capacity);
        } else if (choice == 2)
        {
            simulateLRU(pages, capacity);
        } else
        {
            System.out.println("Invalid choice. Please choose 1 or 2.");
        }
        sc.close();
    }
}


If I were asked to explain this code briefly and in simple terms, I would say:
This Java program simulates two page replacement algorithms: FIFO (First In, First Out) and LRU (Least Recently Used).
•	Goal: The program manages pages in memory and tracks how often a page needs to be loaded (page fault) or is already present in memory (page hit).
How it works:
1.	FIFO (First In, First Out):
o	Simulates how pages are replaced in memory using the FIFO strategy.
o	The first page to be loaded into memory will be the first one to be replaced when a new page is needed.
o	Process: It checks if the requested page is already in memory. If not, it replaces the oldest page.
2.	LRU (Least Recently Used):
o	Tracks which page hasn't been used in the longest time and replaces that page when needed.
o	Uses a LinkedHashMap to keep pages in memory in the order they were last accessed.
o	Process: If a page is in memory, it's marked as recently used. If it’s not, it removes the least recently used page and adds the new one.
Input:
•	The user provides the page references, the number of memory frames (capacity), and selects the algorithm (FIFO or LRU).
Output:
•	The program shows:
o	The state of memory frames after each page request.
o	The total number of page faults and hits.
o	The hit ratio (percentage of hits) and fault ratio (percentage of faults).
Why It Matters:
•	FIFO and LRU help optimize memory usage by managing which pages should stay in memory and which should be replaced.
•	This is important for systems with limited memory, ensuring the most useful pages are kept in memory.
Summary:
•	The program allows the user to test two memory management algorithms.
•	It tracks page hits and faults, then calculates the performance of each algorithm based on the given input.


